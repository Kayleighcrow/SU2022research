//CENTRAL CITY
var xmin_i = 77.17941753149967
var xmax_i = 77.25769511939029
var ymin_i = 28.574233217868453
var ymax_i = 28.621860283088704

//URBANIZING EDGE
var xmin_o = 77.4257037041391
var xmax_o = 77.4864718315805
var ymin_o = 28.467133801739717
var ymax_o = 28.50636205366496

var temporalSegmentation = require('users/wiell/temporalSegmentation:temporalSegmentation')

//This is the function to preprocess the data. It forms the collection and performs cloud masking.

function preProcess(xmin, xmax, ymin, ymax){
  
  var roi = ee.Geometry.BBox(xmin, ymin, xmax, ymax)
  Map.addLayer(roi,
             {'color': 'black'},
             'Geometry [black]: bBox');
  

//Mask clouds on earlier landsat cols
  function maskL457sr(image) {
  // Bit 0 - Fill
  // Bit 1 - Dilated Cloud
  // Bit 2 - Unused
  // Bit 3 - Cloud
  // Bit 4 - Cloud Shadow
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  // Apply the scaling factors to the appropriate bands.
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);

  // Replace the original bands with the scaled ones and apply the masks.
  return image.addBands(opticalBands, null, true)
      .addBands(thermalBand, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask);
}
//mask clouds on landsat 8

  function maskL8sr(image) {
  // Bit 0 - Fill
  // Bit 1 - Dilated Cloud
  // Bit 2 - Cirrus
  // Bit 3 - Cloud
  // Bit 4 - Cloud Shadow
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  // Apply the scaling factors to the appropriate bands.
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);

  // Replace the original bands with the scaled ones and apply the masks.
  return image.addBands(opticalBands, null, true)
      .addBands(thermalBands, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask);
}
//compile image collection for landsat 5,7,8 filtered by cloud cover, roi bounds
    
    var L5coll = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
    .filter(ee.Filter.lt('CLOUD_COVER',90))
    .filterBounds(roi)
    .map(maskL457sr)
     .select(['SR_B1', 'SR_B2', 'SR_B3','SR_B4', 'SR_B5', 'SR_B7'],
     ['B1', 'B2', 'B3', 'B4', 'B5', 'B7']);
     

    var L7coll = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
    .filter(ee.Filter.lt('CLOUD_COVER',90))
    .filterBounds(roi)
    .map(maskL457sr) 
    .select(['SR_B1','SR_B2', 'SR_B3','SR_B4', 'SR_B5', 'SR_B7'],
    ['B1', 'B2', 'B3', 'B4', 'B5', 'B7']);

    var L8coll = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
    .filter(ee.Filter.lt('CLOUD_COVER',90))
    .filterBounds(roi)
    .map(maskL8sr)
    .select(['SR_B2', 'SR_B3', 'SR_B4','SR_B5','SR_B6','SR_B7'],
      ['B1', 'B2', 'B3', 'B4', 'B5', 'B7']);

  var collection_merge = (L5coll.merge(L7coll.merge((L8coll))));

  var addVariables = function(image) {
  // Return the image with the added bands.
    return image
    // Add an NDVI band.
      .addBands(image.normalizedDifference(['B4', 'B3']).rename('NDVI'))

};
  var final_col = collection_merge.map(addVariables);
  return final_col
}

var processed_col = preProcess(xmin_i, xmax_i, ymin_i, ymax_i)
Map.addLayer(processed_col, {}, 'col')
print(processed_col)


//FUNCTION TO RUN CCDC AND EXPORT RESULTS TO DRIVE
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

function run_ccdc(collection, xmin, xmax, ymin, ymax,rmse_on){
  var roi = ee.Geometry.BBox(xmin, ymin, xmax, ymax)
  
// Change detection parameters
  var changeDetection = {
    collection : collection,
    breakpointBands: ['NDVI','B1','B2','B3','B4','B5','B7'],  //detect change by NDVI
    tmaskBands: ['B2','B7'],  //mask clouds using GREEN and SWIR2 bands
    minObservations: 36,       // observations to detect a change **INCREASE THIS TO DECREASE BREAKS
    chiSquareProbability: 0.99,  //threshold for change detection
    minNumOfYearsScaler: 7,  //min number of years to apply new fitting **INCREASE THIS TO DECREASE BREAKS
    dateFormat: 2,          //date outputs in unix time
    lambda: 20/10000,       //convergence parameter [default]
    maxIterations: 25000    //max runs  [default]
  }

//use to run ccdc for bounded dates
  var params = {
    start: '1984-03-01',
    end: '2022-04-06',
    ChangeDetection: changeDetection,   //set change parameters to ones specified stored in variable above
  }

  var ccdc = ee.Algorithms.TemporalSegmentation.Ccdc(params.ChangeDetection) //call ccdc using specified parameters
  print(ccdc)

//Count Breakpoints
//new image, tstart, to simplify array analysis by making a single-band image
  var tstart = (ccdc.select('tStart')) 
//convert tstart to array image
  var imgArr = tstart.toArray() 
//computes length of tstart array (band) for each pixel
  var numBreaks = imgArr.arrayLength(0)
/** convert the numbreaks image from a 1D scalar to a 2D array so we can add it to ccdc
as a band without getting errors during segmentation */
  var numBreaksArr = numBreaks.toArray(0)

  var meow = numBreaksArr.arrayFlatten([['Break Count']])

/** reduce image in order to find max amount of breakpoint bands in the entire image. This will help cap the
amount of bands for exportation without losing any data */

//add break count band to new ccdc collection and eliminate extraneous bands from final collection
  var ccdc_int = ccdc.addBands(numBreaksArr.rename('Break Count'))
  var ccdc_final = ccdc_int.select(['tStart','tEnd','tBreak',
  'numObs','changeProb','B1_coefs','B2_coefs','B3_coefs','B4_coefs','B5_coefs','B7_coefs',
  'NDVI_coefs','B1_rmse','B2_rmse','B3_rmse','B4_rmse','B5_rmse','B7_rmse',
  'NDVI_rmse','Break Count']) 
  Map.addLayer(ccdc_final,{},'ccdc_final')


//unix time
  var dateFormat = 2
//specify max amount of segments for segmentation-- use max breakpoint computation from before
  var maxSegments = 9

/** form segment collection. This will output a list of that allots space for all of the ccdc segments. There is a list of 
maxSegments amount of elements with 30 bands per element. */
  var segments = temporalSegmentation.Segments(ccdc_final, dateFormat, maxSegments)
  var seg_collection = segments.toCollection()
  print(seg_collection, 'seg collection')
  Map.addLayer(seg_collection,{},'collection')


// stores ccdc data into segment collection
  var ccdc_with_seg = ee.Image(seg_collection
    .iterate(function (image, acc) {
      return ee.Image(acc).addBands(image)
    }, ee.Image([])))
  print('ccdc_with_seg', ccdc_with_seg)
  Map.addLayer(ccdc_with_seg, null, 'ccdc_with_seg', false)

//make list of bands so i can iterate through it to add to finalized collection 
// *make sure to add another row of coefficients to this list if outputting additional segments*

var coef_bands = ['B1_coefs','B2_coefs','B3_coefs','B4_coefs','B5_coefs','B7_coefs','NDVI_coefs',
'B1_coefs_1','B2_coefs_1','B3_coefs_1','B4_coefs_1','B5_coefs_1','B7_coefs_1','NDVI_coefs_1',
'B1_coefs_2','B2_coefs_2','B3_coefs_2','B4_coefs_2','B5_coefs_2','B7_coefs_2','NDVI_coefs_2',
'B1_coefs_3','B2_coefs_3','B3_coefs_3','B4_coefs_3','B5_coefs_3','B7_coefs_3','NDVI_coefs_3',
'B1_coefs_4','B2_coefs_4','B3_coefs_4','B4_coefs_4','B5_coefs_4','B7_coefs_4','NDVI_coefs_4',
'B1_coefs_5','B2_coefs_5','B3_coefs_5','B4_coefs_5','B5_coefs_5','B7_coefs_5','NDVI_coefs_5',
'B1_coefs_6','B2_coefs_6','B3_coefs_6','B4_coefs_6','B5_coefs_6','B7_coefs_6','NDVI_coefs_6',
'B1_coefs_7','B2_coefs_7','B3_coefs_7','B4_coefs_7','B5_coefs_7','B7_coefs_7','NDVI_coefs_7',
'B1_coefs_8','B2_coefs_8','B3_coefs_8','B4_coefs_8','B5_coefs_8','B7_coefs_8','NDVI_coefs_8']

//band count
var bc = 0
//start building collection!
for(var i=0; i<coef_bands.length; i++){
  //(WORKING)For each array band (model coefficient band), flatten it into 8 separate bands, labeled with 01-08 depending on which coefficient it is.
  var coef_arr = (ccdc_with_seg.select(coef_bands[i]).toArray())
  var bands_flattened = coef_arr.arrayFlatten([[coef_bands[i]+'_01',
    coef_bands[i]+'_02',coef_bands[i]+'_03',coef_bands[i]+'_04',coef_bands[i]+'_05',coef_bands[i]+'_06',coef_bands[i]+'_07',coef_bands[i]+'_08']])
//base case for if on first segment 
    if ((i % 7) === 0){
      if (i === 0){
        var final_im = meow.rename('Break Count').toFloat()
        final_im = final_im.addBands(ccdc_with_seg.select('tStart').float())
        final_im = final_im.addBands((ccdc_with_seg.select('tEnd').float()))
        final_im = final_im.addBands(ccdc_with_seg.select('tBreak').float())
        //rmse export if setting is turned on 
        if (rmse_on === true){
          final_im = final_im.addBands((ccdc_with_seg.select('B1_rmse').float()))
           final_im = final_im.addBands((ccdc_with_seg.select('B2_rmse').float()))
            final_im = final_im.addBands((ccdc_with_seg.select('B3_rmse').float()))
             final_im = final_im.addBands((ccdc_with_seg.select('B4_rmse').float()))
              final_im = final_im.addBands((ccdc_with_seg.select('B5_rmse').float()))
               final_im = final_im.addBands((ccdc_with_seg.select('B7_rmse').float()))
                final_im = final_im.addBands((ccdc_with_seg.select('NDVI_rmse').float()))
        }
      }
      //build on subsequent segments 
      else{
        final_im = final_im.addBands(ccdc_with_seg.select('tStart_'+bc).float())
        final_im = final_im.addBands(ccdc_with_seg.select('tEnd_'+bc).float())
        final_im = final_im.addBands(ccdc_with_seg.select('tBreak_'+bc).float())
        //more rmse additions
                if (rmse_on === true){
          final_im = final_im.addBands((ccdc_with_seg.select('B1_rmse_'+bc).float()))
           final_im = final_im.addBands((ccdc_with_seg.select('B2_rmse_'+bc).float()))
            final_im = final_im.addBands((ccdc_with_seg.select('B3_rmse_'+bc).float()))
             final_im = final_im.addBands((ccdc_with_seg.select('B4_rmse_'+bc).float()))
              final_im = final_im.addBands((ccdc_with_seg.select('B5_rmse_'+bc).float()))
               final_im = final_im.addBands((ccdc_with_seg.select('B7_rmse_'+bc).float()))
                final_im = final_im.addBands((ccdc_with_seg.select('NDVI_rmse_'+bc).float()))
        }
      }
      bc++
    }
    //add bands to final collection and cast to float so gee doesn't yell at you 
    final_im = final_im.addBands(bands_flattened.float(),null,true)
}
//add break count band, once again casting 


// (NOT WORKING) print layer to see if coefficient bands properly flattened out:
Map.addLayer(ccdc_with_seg,{},'ccdc with seg, flattened')
print(ccdc_with_seg, 'ccdc with seg, flattened')
Map.addLayer(final_im, {}, 'final_im')
print(final_im, 'final im')


// code for exportation
  Export.image.toDrive({
    image: final_im,
    description: 'final_ccdc_export',
    crs: 'EPSG:3857',
    region: roi,
    scale: 30,
    fileFormat: 'GeoTIFF',
    formatOptions: {
    cloudOptimized: true
    }
  });

}

run_ccdc(processed_col, xmin_i, xmax_i, ymin_i, ymax_i, true)
